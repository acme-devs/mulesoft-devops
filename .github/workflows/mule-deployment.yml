##########################################################################
# Mulesoft CICD Pipeline - Deploy Mulesoft Application
##########################################################################

name: Deployment
on:
  workflow_call:

env:
  CONFIGURATIONS_REPOSITORY: common-configurations
  GLOBAL_CONFIGURATION: _global.yml
  SECRETS_AZURE_KEYVAULT: MyAzureKeyVaultCA-KV-Mulesoft
  MESSAGE_SERVICE_SUCCESS_DEPLOYED: "The service was successfully deployed"
  MESSAGE_SERVICE_INTERNAL_ERROR: "There was an internal error in the deployment process"

  MESSAGE_SERVICE_NOT_DEPLOYED: "The service couldn't be deployed"
  MESSAGE_SERVICE_BAT_SUCCESS: "The BAT tests run successfully"
  MESSAGE_SERVICE_NO_BAT: "There aren't any BAT tests"
  MESSAGE_SERVICE_BAT_FAILURE: "BAT testig with failures"

jobs:

  CloudHub:
    name: CloudHub
    runs-on: ubuntu-latest

    steps:

      - name: Get token from Github App
        id: app-token
        uses: acme-devs/mulesoft-devops/packages/mule-apptoken@main
        with:
          client-id: ${{ secrets.MULESOFT_GITHUBAPP_CLIENTID}}
          privatekey: ${{ secrets.MULESOFT_GITHUBAPP_PRIVATEKEY }}

      - name: Get secrets from Azure Key Vault
        id: secrets
        uses: acme-devs/mulesoft-devops/packages/mule-secrets-azure@main
        with:
          keyvault-key: ${{ env.SECRETS_AZURE_KEYVAULT}}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get service configuration
        uses: acme-devs/mulesoft-devops/packages/mule-configuration@main

      - name: Get jar file
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: '${{ github.repository }}'
          version: 'tags/${{ env.deployment_version }}'
          regex: false
          file: "${{ env.service_artifact }}-${{ env.deployment_version }}-${{ env.configuration_apptype }}.jar"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug show root files
        id: debug-show-root-files
        shell: bash
        run: |
          echo " "
          echo "***************************************"
          echo "Debug show root files"
          echo "***************************************"
          echo " "
          ls -l

      - name: Deploy the service in Cloudhub1 
        id: deployment-ch1
        uses: acme-devs/mulesoft-devops/packages/mule-cloudhub@main

      - name: Create badge for deployment
        uses: acme-devs/mulesoft-devops/packages/mule-badge@main
        with:
          label: '${{ env.deployment_environment }} version'
          status: '${{ env.deployment_version }}'
          color: '535597'
          file: ${{ env.service_name }}-${{ env.deployment_environment }}.svg
          folder: ${{ env.service_name }}

      - name: Custom Logging
        id: custom-logging
        if: "env.configuration_deployment_customlogger == 'true'"
        uses: acme-devs/mulesoft-devops/packages/mule-customlog@main

      - name: BAT Testing
        id: bat
        uses: acme-devs/mulesoft-devops/packages/mule-bat@main
        with:
          deployment-env: ${{ env.deployment_environment }} 

      #################################################################
      # Issue Management: create, close, add comments
      #################################################################
      - name: Issue management
        id: issue-management
        if: always()
        env:
          GITHUB_TOKEN: ${{ env.github_automationbot_token }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Issue Management: create, close, add comments"
          echo "  ${{ github.event.issue.html_url }}"
          echo "***********************************************"
          echo " "
          echo "  Current environment: $deployment_environment, from: $configuration_environments"
          echo "  Deployment status -> steps.deployment-ch1.outputs.outcome=${{ steps.deployment-ch1.outputs.outcome }}"
          echo " "

          if [[ ${{ steps.deployment-ch1.outputs.outcome }} != "success" ]]; then
            echo "  There was a problem in the deployment, closing issue with internal error "
            gh issue comment ${{ github.event.issue.number }} \
              -b "${{ env.MESSAGE_SERVICE_INTERNAL_ERROR }}"

            gh issue close ${{ github.event.issue.number }} \
              -r "not planned"
          else
            gh issue comment ${{ github.event.issue.number }} \
              -b "${{ env.MESSAGE_SERVICE_SUCCESS_DEPLOYED }}"

            gh issue close ${{ github.event.issue.number }} \
              -r "completed"

            echo "  Deployment analysis:"
            echo "    github.run_number= ${{github.run_number}}"
            echo "    github.run_attempt= ${{github.run_attempt}}"
            echo "    github.event.issue.assignee.login= ${{github.event.issue.assignee.login}}"
            echo " "

            execute_deployment="true"
            if [[ "${{github.run_attempt}}" != "1" ]]; then
              echo "  The workflow was re-run"
              if [[ "$configuration_redeployment_next_environment" == "false" ]]; then
                execute_deployment="false"
                echo " "
                echo "  Service won't be deployed to the next environment,redeployment-next-environment= $configuration_redeployment_next_environment"
              
              else
                echo "  The service it is a candiate for deployment in next environment, configuration_redeployment_next_environment= $configuration_redeployment_next_environment"
              fi
            else
              echo "  This is the first time the workflow is running, it is a candidate to be deployed to the next environment"
            fi

            if [[ "$execute_deployment" == "true" ]]; then
              echo " "
              echo "  ***********************************************"
              echo "  Create Deployment Issue"
              echo "  ***********************************************"
              echo " "
              echo "  Current environment: $deployment_environment, from: $configuration_environments"
              
              # Environment list to an array
              read -a array <<< "$configuration_environments"
    
              # Find the current environment in the list
              currentIndex=-1
              for i in "${!array[@]}"; do
                if [[ "${array[$i]}" = "$deployment_environment" ]]; then
                  currentIndex=$i;
                fi
              done
    
              if (( $currentIndex == -1 )); then
                echo "Error, the current environment is not in the list of deployment"
                exit 1
              fi
    
              # Find the next environment for deployment
              sizearray=${#array[@]}
              nextindex=$(($currentIndex + 1))
    
              if (( $sizearray > $nextindex )); then
                nextenvironment=${array[$nextindex]}
    
                echo "  Next environment to deploy the application: $nextenvironment"
                gh -R "${{ github.repository }}" issue create \
                    -t "Deployment $nextenvironment ${{ env.service_name }} ${{ env.service_version }}" \
                    -a "${{ github.event.issue.assignee.login }}" \
                    -b "The deployment job in $deployment_environment environment triggered this deployment" \
                    -l "deployment" \
                    -p "${{ env.deployment_project }}"
              else
                echo "  No more environments to deploy"
              fi
            fi  # $execute_deployment != true

          fi # steps.deployment-ch1.outputs.outcome != success 